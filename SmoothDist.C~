
#include "getvalues.C"

std::map<int,double> SmoothDist(Double_t d0cut=100, TString analysis_opt="> d2d dmm anymass1L2M fixedwindow"){

  Int_t mass = 40;
  Int_t jalg = 2;
  TString lt = "m3p5";
  Long64_t drawN = (Long64_t) -1;
  Bool_t ScalePlots = true;
  
  TString xlabel = "M_{vis} (GeV/c^{2})";
  TString ylabel = "E_{miss} (GeV)";

  OBS_ID obs1 = omass_encoded_dcut;
  OBS_ID obs2 = oemiss_encoded_dcut;

  
  TCanvas *c1 = new TCanvas("c1","c1",0,0,1000,700); 

  std::pair<std::vector<Double_t>, Double_t> munuqq1 = getvalues(obs1, "munuqq", mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zmumu1 = getvalues(obs1, "Zmumu", mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Ztautau1 = getvalues(obs1, "Ztautau", mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zuds1 = getvalues(obs1, "Zuds",mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zbb1 = getvalues(obs1, "Zbb",mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zcc1 = getvalues(obs1, "Zcc",mass, "n/a", drawN, d0cut, jalg, analysis_opt);

  std::pair<std::vector<Double_t>, Double_t> munuqq2 = getvalues(obs2, "munuqq", mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zmumu2 = getvalues(obs2, "Zmumu", mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Ztautau2 = getvalues(obs2, "Ztautau", mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zuds2 = getvalues(obs2, "Zuds",mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zbb2 = getvalues(obs2, "Zbb",mass, "n/a", drawN, d0cut, jalg, analysis_opt);
  std::pair<std::vector<Double_t>, Double_t> Zcc2 = getvalues(obs2, "Zcc",mass, "n/a", drawN, d0cut, jalg, analysis_opt);

  

  TH2F *H2 = new TH2F("Granular2D","Granular2D",200,0,100,120,0,60);
  TH2F *H2S = new TH2F("Smoothed2D","Smoothed2D",200,0,100,120,0,60);
  TH2F *H2W = new TH2F("Weighted2D","Weighted2D",200,0,100,120,0,60);
  TH2F *H2C = new TH2F("GranularWCut","Granular with D cut",200,0,120,0,60);

  Double_t ScaleFactor[6] =  {1,1,1,1,1,1}; // order as written above 
  

  std::vector<Double_t> vec1;
  int count=0, countcut=0;

  vec1 = munuqq1.first;
  for (double d : vec1) if (d<0) countcut++;
  ScaleFactor[0] = 1.*countcut/vec1.size();
  countcut=0;

  vec1 = Zmumu1.first;
  for (double d : vec1) if (d<0) countcut++;
  ScaleFactor[1] = 1.*countcut/vec1.size();
  countcut=0;

  vec1 = Ztautau1.first;
  for (double d : vec1) if (d<0) countcut++;
  ScaleFactor[2] = 1.*countcut/vec1.size();
  countcut=0;

  vec1 = Zuds1.first;
  for (double d : vec1) if (d<0) countcut++;
  ScaleFactor[3] = 1.*countcut/vec1.size();
  countcut=0;

  vec1 = Zbb1.first;
  for (double d : vec1) if (d<0) countcut++;
  ScaleFactor[4] = 1.*countcut/vec1.size();
  countcut=0;

  vec1 = Zcc1.first;
  for (double d : vec1) if (d<0) countcut++;
  ScaleFactor[5] = 1.*countcut/vec1.size();
  countcut=0;


  

  
  for (int i=0; i < munuqq1.first.size(); i++){
    H2->Fill(abs(munuqq1.first[i]),abs(munuqq2.first[i]), Weight("munuqq","n/a","n/a",munuqq1.second));
    H2W->Fill(abs(munuqq1.first[i]),abs(munuqq2.first[i]), ScaleFactor[0]*Weight("munuqq","n/a","n/a",munuqq1.second));
    if (munuqq1.first[i]<0) H2C->Fill(abs(munuqq1.first[i]),abs(munuqq2.first[i]), Weight("munuqq","n/a","n/a",munuqq1.second));
  }

  for (int i=0; i < Zmumu1.first.size(); i++){
    H2->Fill(abs(Zmumu1.first[i]),abs(Zmumu2.first[i]), Weight("Zmumu","n/a","n/a",Zmumu1.second));
    H2W->Fill(abs(Zmumu1.first[i]),abs(Zmumu2.first[i]), ScaleFactor[1]*Weight("Zmumu","n/a","n/a",Zmumu1.second));
    if (Zmumu1.first[i]<0) H2C->Fill(abs(Zmumu1.first[i]),abs(Zmumu2.first[i]), Weight("Zmumu","n/a","n/a",Zmumu1.second));
  }
  
  for (int i=0; i < Ztautau1.first.size(); i++){
    H2->Fill(abs(Ztautau1.first[i]),abs(Ztautau2.first[i]), Weight("Ztautau","n/a","n/a",Ztautau1.second));
    H2W->Fill(abs(Ztautau1.first[i]),abs(Ztautau2.first[i]), ScaleFactor[2]*Weight("Ztautau","n/a","n/a",Ztautau1.second));
    if (Ztautau1.first[i]<0) H2C->Fill(abs(Ztautau1.first[i]),abs(Ztautau2.first[i]), Weight("Ztautau","n/a","n/a",Ztautau1.second));
  }

  for (int i=0; i < Zuds1.first.size(); i++){
    H2->Fill(abs(Zuds1.first[i]),abs(Zuds2.first[i]), Weight("Zuds","n/a","n/a",Zuds1.second));
    H2W->Fill(abs(Zuds1.first[i]),abs(Zuds2.first[i]), ScaleFactor[3]*Weight("Zuds","n/a","n/a",Zuds1.second));
    if (Zuds1.first[i]<0) H2C->Fill(abs(Zuds1.first[i]),abs(Zuds2.first[i]), Weight("Zuds","n/a","n/a",Zuds1.second));
  }
  
  for (int i=0; i < Zbb1.first.size(); i++){
    H2->Fill(abs(Zbb1.first[i]),abs(Zbb2.first[i]), Weight("Zbb","n/a","n/a",Zbb1.second));
    H2W->Fill(abs(Zbb1.first[i]),abs(Zbb2.first[i]), ScaleFactor[4]*Weight("Zbb","n/a","n/a",Zbb1.second));
    if (Zbb1.first[i]<0) H2C->Fill(abs(Zbb1.first[i]),abs(Zbb2.first[i]), Weight("Zbb","n/a","n/a",Zbb1.second));
  }
  

  for (int i=0; i < Zcc1.first.size(); i++){
    H2->Fill(abs(Zcc1.first[i]),abs(Zcc2.first[i]), Weight("Zcc","n/a","n/a",Zcc1.second));
    H2W->Fill(abs(Zcc1.first[i]),abs(Zcc2.first[i]), ScaleFactor[5]*Weight("Zcc","n/a","n/a",Zcc1.second));
    if (Zcc1.first[i]<0) H2C->Fill(abs(Zcc1.first[i]),abs(Zcc2.first[i]), Weight("Zcc","n/a","n/a",Zcc1.second));
  }
  

  cout<<endl<<"Scale Factors:"<<endl;
  cout<<"munuqq  : "<<ScaleFactor[0]<<endl;
  cout<<"Zmumu   : "<<ScaleFactor[1]<<endl;
  cout<<"Ztautau : "<<ScaleFactor[2]<<endl;
  cout<<"Zuds    : "<<ScaleFactor[3]<<endl;
  cout<<"Zbb     : "<<ScaleFactor[4]<<endl;
  cout<<"Zcc     : "<<ScaleFactor[5]<<endl<<endl;
  
  
  

  
  
  for (int i=4; i<H2S->GetNbinsX()-4; i++){
    for (int j=0; j<H2S->GetNbinsY()-4; j++){

      //double content = H2->GetBinContent(i,j) / 49.;

      double content = 0.;
      for (int b1 = -3; b1<=3; b1++)
	for (int b2 = -3; b2<=3; b2++)
	  content += (H2->GetBinContent(i-b1, j-b2)/49. + H2->GetBinContent(i+b1, j+b2)/49.);


      H2S->SetBinContent(i,j,content);
	

    }
  }

  

  H2W->GetXaxis()->SetTitle(xlabel);
  H2W->GetYaxis()->SetTitle(ylabel);
  H2W->Draw("colz");
  gPad->SetLogz();
  gStyle->SetOptStat(0);

  c1->SaveAs("temp.png");
  c1->SaveAs("temp.pdf");

  
  cout<<"*** Full   Integral "<<H2->Integral()<<endl;
  cout<<"*** Weight Integral "<<H2W->Integral()<<endl;


  double zmass = 91.1786;

  

  std::map<int, double> toret;
  toret.clear();

  for (int imass : std::vector<int>{5,10,20,30,40,50,60,70,80,85}){
    Double_t precoil = (zmass*zmass - 1.* imass*imass ) / (2 * zmass);

    double counter = 0.;
    for (int i=0; i<H2W->GetNbinsX(); i++){
      for (int j=0; j< H2W->GetNbinsY(); j++){

	if (TMath::Abs( H2W->GetXaxis()->GetBinCenter(i) - imass) <= 4. && TMath::Abs( H2W->GetYaxis()->GetBinCenter(j) - precoil) <= 3.5 )
	  counter += H2W->GetBinContent(i,j);
      }
    }

    toret[imass] = counter;
  }

  return toret;
}

  
  
